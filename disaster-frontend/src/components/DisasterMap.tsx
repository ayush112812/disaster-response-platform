/**
 * Interactive Disaster Map Component
 *
 * AI TOOL USAGE: This entire component was generated by Cursor AI
 * - Leaflet integration for interactive mapping
 * - Real-time disaster and resource visualization
 * - WebSocket integration for live updates
 * - Dynamic styling based on severity and status
 * - Interactive popups and click handlers
 */

import React, { useEffect, useState } from 'react';
import { MapContainer, TileLayer, Marker, Popup, useMap } from 'react-leaflet';
import L from 'leaflet';
import 'leaflet/dist/leaflet.css';
import { useWebSocket } from '../hooks/useWebSocket';
import { Disaster, Resource } from '../types';
import { fetchDisasters, fetchResources } from '../services/api';

// Fix for default markers in Leaflet
delete (L.Icon.Default.prototype as any)._getIconUrl;
L.Icon.Default.mergeOptions({
  iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png',
  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png',
  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',
});

// Custom icons for different disaster severities
const createDisasterIcon = (severity: string) => {
  const color = severity === 'high' ? '#ff0000' : severity === 'medium' ? '#ffa500' : '#ffff00';
  return L.divIcon({
    html: `<div style="background-color: ${color}; width: 20px; height: 20px; border-radius: 50%; border: 2px solid white;"></div>`,
    className: 'custom-div-icon',
    iconSize: [20, 20],
    iconAnchor: [10, 10]
  });
};

const createResourceIcon = (status: string) => {
  const color = status === 'available' ? '#00ff00' : status === 'deployed' ? '#0000ff' : '#808080';
  return L.divIcon({
    html: `<div style="background-color: ${color}; width: 15px; height: 15px; border-radius: 50%; border: 2px solid white;"></div>`,
    className: 'custom-div-icon',
    iconSize: [15, 15],
    iconAnchor: [7, 7]
  });
};

interface DisasterMapProps {
  center?: [number, number];
  zoom?: number;
  onDisasterClick?: (disaster: Disaster) => void;
  onResourceClick?: (resource: Resource) => void;
}

const DisasterMap: React.FC<DisasterMapProps> = ({
  center = [39.8283, -98.5795], // US center (lat, lng for Leaflet)
  zoom = 4,
  onDisasterClick,
  onResourceClick
}) => {
  const [disasters, setDisasters] = useState<Disaster[]>([]);
  const [resources, setResources] = useState<Resource[]>([]);
  const { socket } = useWebSocket();

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    try {
      const [disasterData, resourceData] = await Promise.all([
        fetchDisasters(),
        fetchResources()
      ]);
      setDisasters(disasterData);
      setResources(resourceData);
    } catch (error) {
      console.error('Error loading map data:', error);
      // Set mock data for demo
      setDisasters([
        {
          id: '1',
          title: 'Sample Disaster',
          description: 'Sample disaster for demo',
          location_name: 'New York, NY',
          latitude: 40.7128,
          longitude: -74.0060,
          severity: 'medium',
          status: 'active',
          tags: ['flood'],
          owner_id: 'demo',
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        }
      ]);
    }
  };

  useEffect(() => {
    if (!socket) return;

    socket.on('disaster_update', (data: any) => {
      setDisasters(prev =>
        prev.map(d => d.id === data.disasterId ? { ...d, ...data } : d)
      );
    });

    socket.on('resource_update', (data: any) => {
      setResources(prev =>
        prev.map(r => r.id === data.resourceId ? { ...r, ...data } : r)
      );
    });

    return () => {
      socket.off('disaster_update');
      socket.off('resource_update');
    };
  }, [socket]);

  return (
    <div style={{ width: '100%', height: '100%', minHeight: '500px' }}>
      <MapContainer
        center={center}
        zoom={zoom}
        style={{ width: '100%', height: '100%' }}
      >
        <TileLayer
          url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
          attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        />

        {/* Disaster Markers */}
        {disasters.map(disaster => {
          if (!disaster.latitude || !disaster.longitude) return null;
          return (
            <Marker
              key={disaster.id}
              position={[disaster.latitude, disaster.longitude]}
              icon={createDisasterIcon(disaster.severity)}
              eventHandlers={{
                click: () => onDisasterClick?.(disaster)
              }}
            >
              <Popup>
                <div>
                  <strong>{disaster.title}</strong><br/>
                  Severity: {disaster.severity}<br/>
                  Status: {disaster.status}<br/>
                  Location: {disaster.location_name}
                </div>
              </Popup>
            </Marker>
          );
        })}

        {/* Resource Markers */}
        {resources.map(resource => {
          if (!resource.latitude || !resource.longitude) return null;
          return (
            <Marker
              key={resource.id}
              position={[resource.latitude, resource.longitude]}
              icon={createResourceIcon(resource.status)}
              eventHandlers={{
                click: () => onResourceClick?.(resource)
              }}
            >
              <Popup>
                <div>
                  <strong>{resource.name}</strong><br/>
                  Type: {resource.type}<br/>
                  Status: {resource.status}<br/>
                  Location: {resource.location_name}
                </div>
              </Popup>
            </Marker>
          );
        })}
      </MapContainer>
    </div>
  );
};

export default DisasterMap;