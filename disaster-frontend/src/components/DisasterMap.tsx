/**
 * Interactive Disaster Map Component
 *
 * AI TOOL USAGE: This entire component was generated by Cursor AI
 * - Mapbox GL JS integration for interactive mapping
 * - Real-time disaster and resource visualization
 * - WebSocket integration for live updates
 * - Dynamic styling based on severity and status
 * - Interactive popups and click handlers
 */

import React, { useEffect, useRef, useState } from 'react';
import mapboxgl from 'mapbox-gl';
import 'mapbox-gl/dist/mapbox-gl.css';
import { useWebSocket } from '../hooks/useWebSocket';
import { Disaster, Resource } from '../types';
import { fetchDisasters, fetchResources } from '../services/api';

interface DisasterMapProps {
  center?: [number, number];
  zoom?: number;
  onDisasterClick?: (disaster: Disaster) => void;
  onResourceClick?: (resource: Resource) => void;
}

const DisasterMap: React.FC<DisasterMapProps> = ({
  center = [-98.5795, 39.8283], // US center
  zoom = 4,
  onDisasterClick,
  onResourceClick
}) => {
  const mapContainer = useRef<HTMLDivElement>(null);
  const map = useRef<mapboxgl.Map | null>(null);
  const [disasters, setDisasters] = useState<Disaster[]>([]);
  const [resources, setResources] = useState<Resource[]>([]);
  const { socket } = useWebSocket();

  useEffect(() => {
    if (!mapContainer.current) return;

    map.current = new mapboxgl.Map({
      container: mapContainer.current,
      style: 'mapbox://styles/mapbox/streets-v11',
      center,
      zoom
    });

    map.current.addControl(new mapboxgl.NavigationControl());

    // Load initial data
    loadData();

    return () => {
      map.current?.remove();
    };
  }, []);

  const loadData = async () => {
    try {
      const [disasterData, resourceData] = await Promise.all([
        fetchDisasters(),
        fetchResources()
      ]);
      setDisasters(disasterData);
      setResources(resourceData);
      updateMap(disasterData, resourceData);
    } catch (error) {
      console.error('Error loading map data:', error);
    }
  };

  useEffect(() => {
    if (!socket) return;

    socket.on('disaster_update', (data: any) => {
      setDisasters(prev => {
        const updated = prev.map(d => 
          d.id === data.disasterId ? { ...d, ...data } : d
        );
        updateMap(updated, resources);
        return updated;
      });
    });

    socket.on('resource_update', (data: any) => {
      setResources(prev => {
        const updated = prev.map(r => 
          r.id === data.resourceId ? { ...r, ...data } : r
        );
        updateMap(disasters, updated);
        return updated;
      });
    });

    return () => {
      socket.off('disaster_update');
      socket.off('resource_update');
    };
  }, [socket, disasters, resources]);

  const updateMap = (disasters: Disaster[], resources: Resource[]) => {
    if (!map.current) return;

    // Remove existing layers
    if (map.current.getLayer('disasters')) map.current.removeLayer('disasters');
    if (map.current.getLayer('resources')) map.current.removeLayer('resources');
    if (map.current.getSource('disasters')) map.current.removeSource('disasters');
    if (map.current.getSource('resources')) map.current.removeSource('resources');

    // Add disasters layer
    map.current.addSource('disasters', {
      type: 'geojson',
      data: {
        type: 'FeatureCollection',
        features: disasters.map(disaster => ({
          type: 'Feature',
          geometry: {
            type: 'Point',
            coordinates: [disaster.longitude, disaster.latitude]
          },
          properties: {
            id: disaster.id,
            title: disaster.title,
            type: disaster.disaster_type,
            severity: disaster.severity
          }
        }))
      }
    });

    map.current.addLayer({
      id: 'disasters',
      type: 'circle',
      source: 'disasters',
      paint: {
        'circle-radius': [
          'match',
          ['get', 'severity'],
          'high', 15,
          'medium', 10,
          'low', 7,
          7
        ],
        'circle-color': [
          'match',
          ['get', 'severity'],
          'high', '#ff0000',
          'medium', '#ffa500',
          'low', '#ffff00',
          '#ffff00'
        ],
        'circle-opacity': 0.7
      }
    });

    // Add resources layer
    map.current.addSource('resources', {
      type: 'geojson',
      data: {
        type: 'FeatureCollection',
        features: resources.map(resource => ({
          type: 'Feature',
          geometry: {
            type: 'Point',
            coordinates: [resource.longitude, resource.latitude]
          },
          properties: {
            id: resource.id,
            name: resource.name,
            type: resource.type,
            status: resource.status
          }
        }))
      }
    });

    map.current.addLayer({
      id: 'resources',
      type: 'circle',
      source: 'resources',
      paint: {
        'circle-radius': 6,
        'circle-color': [
          'match',
          ['get', 'status'],
          'available', '#00ff00',
          'deployed', '#0000ff',
          'unavailable', '#808080',
          '#00ff00'
        ],
        'circle-opacity': 0.7
      }
    });

    // Add click handlers
    map.current.on('click', 'disasters', (e) => {
      if (!e.features?.[0]) return;
      const disaster = disasters.find(d => d.id === e.features[0].properties?.id);
      if (disaster && onDisasterClick) onDisasterClick(disaster);
    });

    map.current.on('click', 'resources', (e) => {
      if (!e.features?.[0]) return;
      const resource = resources.find(r => r.id === e.features[0].properties?.id);
      if (resource && onResourceClick) onResourceClick(resource);
    });

    // Add popups
    const popup = new mapboxgl.Popup({
      closeButton: false,
      closeOnClick: false
    });

    map.current.on('mouseenter', 'disasters', (e) => {
      if (!e.features?.[0]) return;
      map.current!.getCanvas().style.cursor = 'pointer';

      const coordinates = e.features[0].geometry.coordinates.slice();
      const { title, type, severity } = e.features[0].properties!;

      popup
        .setLngLat(coordinates as [number, number])
        .setHTML(`
          <strong>${title}</strong><br/>
          Type: ${type}<br/>
          Severity: ${severity}
        `)
        .addTo(map.current!);
    });

    map.current.on('mouseleave', 'disasters', () => {
      map.current!.getCanvas().style.cursor = '';
      popup.remove();
    });

    map.current.on('mouseenter', 'resources', (e) => {
      if (!e.features?.[0]) return;
      map.current!.getCanvas().style.cursor = 'pointer';

      const coordinates = e.features[0].geometry.coordinates.slice();
      const { name, type, status } = e.features[0].properties!;

      popup
        .setLngLat(coordinates as [number, number])
        .setHTML(`
          <strong>${name}</strong><br/>
          Type: ${type}<br/>
          Status: ${status}
        `)
        .addTo(map.current!);
    });

    map.current.on('mouseleave', 'resources', () => {
      map.current!.getCanvas().style.cursor = '';
      popup.remove();
    });
  };

  return (
    <div 
      ref={mapContainer} 
      style={{ 
        width: '100%', 
        height: '100%',
        minHeight: '500px',
        borderRadius: '8px',
        overflow: 'hidden'
      }} 
    />
  );
};

export default DisasterMap;